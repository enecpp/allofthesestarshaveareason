@page "/video-result/{ResultId:int}"
@using allofthosestarshaveareason.DTOs
@using MudBlazor
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Video Analiz Sonucu</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <MudText Typo="Typo.h6">Yükleniyor...</MudText>
    }
    else if (result == null)
    {
        <MudAlert Severity="Severity.Error">Analiz sonucu bulunamadý.</MudAlert>
    }
    else
    {
        <MudGrid>
            <!-- Video Player -->
            <MudItem xs="12" md="8">
                <MudPaper Class="pa-4">
                    <CustomVideoPlayer @ref="videoPlayer" 
                                     VideoUrl="@result.VideoUrl"
                                     OnTimeChanged="OnVideoTimeChanged"
                                     OnDurationLoaded="OnVideoDurationLoaded" />
                    
                    <MudText Typo="Typo.caption" Class="mt-2">
                        Mevcut Zaman: @FormatTime(currentTime) / @FormatTime(duration)
                    </MudText>
                </MudPaper>
            </MudItem>

            <!-- Arama ve Bilgiler -->
            <MudItem xs="12" md="4">
                <MudPaper Class="pa-4">
                    <MudTextField @bind-Value="searchQuery" 
                                Label="Videoda Ara" 
                                Variant="Variant.Outlined"
                                Adornment="Adornment.End"
                                AdornmentIcon="@Icons.Material.Filled.Search"
                                OnAdornmentClick="SearchInVideo" />
                    
                    @if (searchResults != null && searchResults.Any())
                    {
                        <MudText Typo="Typo.h6" Class="mt-4">Arama Sonuçlarý:</MudText>
                        <MudList T="string">
                            @foreach (var segment in searchResults)
                            {
                                <MudListItem T="string" OnClick="() => SeekToSegment(segment.StartTime)">
                                    <MudText Typo="Typo.body2">
                                        <strong>@segment.Speaker</strong> (@FormatTime(segment.StartTime))
                                    </MudText>
                                    <MudText Typo="Typo.caption">@segment.Text</MudText>
                                </MudListItem>
                                <MudDivider />
                            }
                        </MudList>
                    }
                </MudPaper>

                <!-- Sahneler -->
                <MudPaper Class="pa-4 mt-4">
                    <MudText Typo="Typo.h6">Sahneler:</MudText>
                    <MudList T="string">
                        @foreach (var scene in result.Scenes)
                        {
                            <MudListItem T="string" OnClick="() => SeekToSegment(scene.StartTime)">
                                <MudText Typo="Typo.body2">
                                    <strong>@scene.Title</strong>
                                </MudText>
                                <MudText Typo="Typo.caption">
                                    @FormatTime(scene.StartTime) - @FormatTime(scene.EndTime)
                                </MudText>
                            </MudListItem>
                            <MudDivider />
                        }
                    </MudList>
                </MudPaper>
            </MudItem>

            <!-- Transkript -->
            <MudItem xs="12">
                <MudPaper Class="pa-4">
                    <MudText Typo="Typo.h6">Transkript:</MudText>
                    <MudList T="string">
                        @foreach (var segment in result.Transcript)
                        {
                            <MudListItem T="string" OnClick="() => SeekToSegment(segment.StartTime)">
                                <MudText Typo="Typo.body2">
                                    <strong>@segment.Speaker</strong> (@FormatTime(segment.StartTime))
                                </MudText>
                                <MudText Typo="Typo.body1">@segment.Text</MudText>
                            </MudListItem>
                            <MudDivider />
                        }
                    </MudList>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter]
    public int ResultId { get; set; }

    private CustomVideoPlayer? videoPlayer;
    private VideoAnalysisResultDto? result;
    private List<TranscriptSegmentDto>? searchResults;
    private string searchQuery = string.Empty;
    private bool isLoading = true;
    private double currentTime;
    private double duration;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            result = await Http.GetFromJsonAsync<VideoAnalysisResultDto>(
                $"api/VideoAnalysis/result/{ResultId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading result: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchInVideo()
    {
        if (string.IsNullOrWhiteSpace(searchQuery)) return;

        try
        {
            searchResults = await Http.GetFromJsonAsync<List<TranscriptSegmentDto>>(
                $"api/VideoAnalysis/result/{ResultId}/search?query={Uri.EscapeDataString(searchQuery)}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching: {ex.Message}");
        }
    }

    private async Task SeekToSegment(double startTime)
    {
        if (videoPlayer != null)
        {
            await videoPlayer.SeekTo(startTime);
            await videoPlayer.Play();
        }
    }

    private void OnVideoTimeChanged(double time)
    {
        currentTime = time;
        StateHasChanged();
    }

    private void OnVideoDurationLoaded(double dur)
    {
        duration = dur;
        StateHasChanged();
    }

    private string FormatTime(double seconds)
    {
        var timeSpan = TimeSpan.FromSeconds(seconds);
        return timeSpan.ToString(@"mm\:ss");
    }
}
