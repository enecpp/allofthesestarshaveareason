@page "/analysis/{VideoId:int}"

<PageTitle>Analiz Sonuçları</PageTitle>

@if (analysisResult == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudGrid Spacing="3">
        
        <MudItem xs="12" md="8">
            <MudPaper Class="pa-4" Elevation="3">
                <VideoPlayer VideoUrl="@analysisResult.VideoUrl" @ref="videoPlayer" />
            </MudPaper>
            <MudPaper Class="pa-4 mt-3" Elevation="3">
                <SceneTimeline Scenes="@analysisResult.Scenes" OnSceneClicked="SeekTo" />
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="4">
            <MudPaper Class="pa-4" Elevation="3" Style="height: 80vh; display: flex; flex-direction: column;">
                <MudTextField @bind-Value="searchTerm" Label="Transkript içinde ara..." Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" OnAdornmentClick="SearchTranscript" />
                <div style="overflow-y: auto; flex-grow: 1; margin-top: 10px;">
                    <TranscriptView Segments="@filteredSegments" OnSegmentClicked="SeekTo" />
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter]
    public int VideoId { get; set; }

    private VideoAnalysisResult analysisResult;
    private IEnumerable<TranscriptSegment> filteredSegments;
    private string searchTerm;

    private VideoPlayer videoPlayer; 

    protected override async Task OnInitializedAsync()
    {
        
        analysisResult = GetDummyData();
        filteredSegments = analysisResult.Transcript;
    }
    
    private async Task SeekTo(double timeInSeconds)
    {
        await videoPlayer.SeekToTime(timeInSeconds);
    }

    private void SearchTranscript()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredSegments = analysisResult.Transcript;
        }
        else
        {
            filteredSegments = analysisResult.Transcript
                .Where(s => s.Text.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }
    }

    
    private VideoAnalysisResult GetDummyData() { /* ... */ }
}