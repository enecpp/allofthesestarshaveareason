using Microsoft.AspNetCore.Mvc;
using allofthesestarshaveareason.Services;

namespace allofthesestarshaveareason.Controllers;

[Route("api/[controller]")]
[ApiController]
public class VideoAnalysisController : ControllerBase
{
    private readonly IAnalysisService _analysisService;
    private readonly ILogger<VideoAnalysisController> _logger;

    public VideoAnalysisController(
        IAnalysisService analysisService,
        ILogger<VideoAnalysisController> logger)
    {
        _analysisService = analysisService;
        _logger = logger;
    }

    [HttpPost("upload")]
    public async Task<IActionResult> UploadVideo(IFormFile file)
    {
        if (file == null || file.Length == 0)
        {
            _logger.LogWarning("Upload attempt with empty file");
            return BadRequest(new { error = "Please choose a video file." });
        }

        // Validate file type
        var allowedExtensions = new[] { ".mp4", ".avi", ".mov", ".mkv", ".webm" };
        var fileExtension = Path.GetExtension(file.FileName).ToLowerInvariant();
        
        if (!allowedExtensions.Contains(fileExtension))
        {
            _logger.LogWarning("Invalid file type: {FileExtension}", fileExtension);
            return BadRequest(new { error = $"Invalid file type. Allowed types: {string.Join(", ", allowedExtensions)}" });
        }

        // Validate file size (max 500MB)
        const long maxFileSize = 500 * 1024 * 1024;
        if (file.Length > maxFileSize)
        {
            _logger.LogWarning("File too large: {FileSize} bytes", file.Length);
            return BadRequest(new { error = "File size exceeds maximum limit of 500MB." });
        }

        try
        {
            var jobId = await _analysisService.StartAnalysisJobAsync(file);
            _logger.LogInformation("Analysis job started: {JobId} for file: {FileName}", jobId, file.FileName);

            return Accepted(new 
            { 
                jobId = jobId,
                message = "Video upload successful. Analysis started.",
                statusUrl = $"/api/VideoAnalysis/status/{jobId}"
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error starting analysis for file: {FileName}", file.FileName);
            return StatusCode(500, new { error = "An error occurred while processing your video.", details = ex.Message });
        }
    }

    [HttpGet("status/{jobId}")]
    public async Task<IActionResult> GetAnalysisStatus(string jobId)
    {
        if (string.IsNullOrWhiteSpace(jobId))
        {
            return BadRequest(new { error = "Job ID is required." });
        }

        try
        {
            var status = await _analysisService.GetAnalysisStatusAsync(jobId);
            
            if (status == null || status.Status == "Bulunamadı")
            {
                _logger.LogWarning("Job not found: {JobId}", jobId);
                return NotFound(new { error = "Job not found.", jobId });
            }

            return Ok(new
            {
                jobId,
                status = status.Status,
                progress = status.Progress,
                resultId = status.ResultId,
                transcript = status.Transcript,
                scenes = status.Scenes
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error getting status for job: {JobId}", jobId);
            return StatusCode(500, new { error = "An error occurred while retrieving job status.", details = ex.Message });
        }
    }
    
    [HttpGet("results/{resultId}/search")]
    public async Task<IActionResult> SearchInVideo(int resultId, [FromQuery] string query)
    {
        if (string.IsNullOrWhiteSpace(query))
        {
            return BadRequest(new { error = "Search query cannot be empty." });
        }

        if (query.Length < 3)
        {
            return BadRequest(new { error = "Search query must be at least 3 characters long." });
        }

        try
        {
            _logger.LogInformation("Searching in video result {ResultId} for query: {Query}", resultId, query);

            // Şimdilik simülasyon:
            var dummyResults = await Task.FromResult(new List<object>
            {
                new { time = "00:34", text = $"'{query}' kelimesini içeren bir cümle.", relevanceScore = 0.95 },
                new { time = "01:12", text = $"'{query}' hakkında başka bir nokta.", relevanceScore = 0.87 }
            });

            return Ok(new
            {
                resultId,
                query,
                resultsCount = dummyResults.Count,
                results = dummyResults
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error searching in video result: {ResultId} with query: {Query}", resultId, query);
            return StatusCode(500, new { error = "An error occurred while searching.", details = ex.Message });
        }
    }
}


