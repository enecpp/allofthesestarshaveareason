using allofthesestarshaveareason.Models;
using allofthesestarshaveareason.Services.Interfaces;
using Microsoft.ML.OnnxRuntime;
using Microsoft.ML.OnnxRuntime.Tensors;
    
namespace allofthesestarshaveareason.Services.Implementations
{
    public class OnnxTextAnalysisService : ITextAnalysisService
    {
        private readonly InferenceSession _session;
    
        public OnnxTextAnalysisService(IWebHostEnvironment env)
        {
            var modelPath = Path.Combine(env.ContentRootPath, "wwwroot", "ml-models", "model.onnx");
            _session = new InferenceSession(modelPath);
        }
        public async Task<List<SentenceEmbedding>> GenerateEmbeddingsAsync(List<TranscriptSegment> segments)
        {
          
            var embeddings = new List<SentenceEmbedding>();
            var random = new Random();
            foreach (var segment in segments)
            {
                var vector = new float[384];
                for (int i = 0; i < vector.Length; i++)
                {
                    vector[i] = (float)random.NextDouble();
                }
                embeddings.Add(new SentenceEmbedding { /* SegmentId = segment.Id, */ Vector = vector });
            }
            return await Task.FromResult(embeddings);
        }

        public List<TranscriptSegment> FindSimilarSentences(string query, List<TranscriptSegment> allSegments, List<SentenceEmbedding> allEmbeddings)
        {
        
            return allSegments.Where(s => s.Text.Contains(query, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
}
